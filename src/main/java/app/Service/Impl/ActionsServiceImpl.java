package app.Service.Impl;

import app.Repository.UserRepository;
import app.Service.ActionsService;
import app.Service.ClanService;

/**
 * Данный класс объединяет возможные действия пользователей
 * Первый делом пользователь вступает в клан, а дальше идёт на арену, либо на задания, либо в играет в азартные игры
 */
public class ActionsServiceImpl implements ActionsService {

    //TODO Вернуть метод по подсчету строк в Юзерах = количетво

    private UserRepository userRepository;
    private ClanService clanService;
    int countUsers = userRepository.getCountRowsUsersTable(); // TODO Нет юзеров, т.к. NPE ?


    //TODO Переделать на сервис клана
    @Override
    public void runGameUser() {
        int counter = countUsers;
        while (counter-- > 0) {
            int randomCountActions = (int) (Math.random() * 10) + 1;
            String nameUser = userRepository.getUserName(countUsers--);
            if (userRepository.checkIsPresentUserInBD(nameUser)) {
                System.out.println(Thread.currentThread() + " в работе: Игрок " + nameUser + " выбирает клан");
                clanService.JoiningClan(nameUser);
                System.out.println(actionsUsers(nameUser, randomCountActions));
            } else runGameUser();
        }
    }

    /**
     * Метод выполняет рандомное действие
     */
    @Override
    public String actionsUsers(String nameUser, int countActions) {
        if (countActions <= 0)
            return Thread.currentThread() + " в работе: Пользователь " + nameUser + " завершил игру без действий";
        else {
            --countActions;
            int randNumber = (int) ((Math.random() * 3) + 1);
            switch (randNumber) {
                case 1 -> System.out.println(Thread.currentThread() + " в работе: Игрок " + nameUser + " был на арене");
                case 2 ->
                        System.out.println(Thread.currentThread() + " в работе: Игрок " + nameUser + " играл в азартные игры");
                default ->
                        System.out.println(Thread.currentThread() + " в работе: Игрок " + nameUser + " был на задании");
            }
            actionsUsers(nameUser, countActions);
        }
        return Thread.currentThread() + " в работе: Пользователь " + nameUser + " завершил игру и принёс клану пользу";
    }
}